{"version":3,"sources":["common/constants.js","common/card.js","common/common.js","components/bodyheader/bodyheader.js","components/deck/deck.js","components/hand/hand.js","components/notification/notification.js","components/mainheader/mainheader.js","main.js","reportWebVitals.js","index.js"],"names":["CONSTANTS","Object","freeze","Card","suit","rank","SUITES","includes","Error","RANKS","this","serialiseCards","arr","map","c","join","deserialiseCards","str","split","s","suite","assembleDeck","flatMap","r","BodyHeader","title","detail","className","Deck","cards","handleDraw","handleShuffle","useState","numToDraw","setNumToDraw","length","i","style","left","top","zIndex","width","src","alt","type","onClick","method","action","htmlFor","id","min","max","value","onChange","e","target","Hand","sort","totalInHand","setTotalInHand","useEffect","Array","isArray","reduce","previous","current","indexOf","transform","disabled","Notification","msg","hasMsg","MainHeader","handleSave","handleReset","Main","deck","setDeck","hand","setHand","setHasMsg","setMsg","timeString","localStorage","getItem","deckString","handString","date","Date","parseInt","getDate","getMonth","getFullYear","getHours","getMinutes","setTimeout","onload","timestamp","now","setItem","removeItem","deckCopy","slice","removedCards","splice","shuffled","j","Math","floor","random","shuffleCards","handCopy","a","b","aSuit","bSuit","aRank","bRank","sortCards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19270876.chunk.js","sourcesContent":["const CONSTANTS = {\n  'SUITES': ['C', 'S', 'H', 'D'],\n  'RANKS': ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'],\n  'STORAGE-KEY-TIME': 'GREEN-JACQUE-TIMESTAMP',\n  'STORAGE-KEY-DECK': 'GREEN-JACQUE-DECK',\n  'STORAGE-KEY-HAND': 'GREEN-JACQUE-HAND'\n};\n\nObject.freeze(CONSTANTS);\n\nexport default CONSTANTS;","import CONSTANTS from './constants';\n\nclass Card {\n\n  constructor(suit, rank) {\n    if (!CONSTANTS.SUITES.includes(suit)) throw new Error(`Invalid suit \"${suit}\" provided`);\n    if (!CONSTANTS.RANKS.includes(rank)) throw new Error(`Invalid rank \"${rank}\" provided`)\n    this.suit = suit;\n    this.rank = rank;\n  }\n\n}\n\nexport default Card;","import CONSTANTS from \"./constants\";\nimport Card from \"./card\";\n\nfunction sortCards(hand) {\n  const handCopy = hand.slice(0);\n  handCopy.sort((a, b) => {\n    const aSuit = CONSTANTS.SUITES.indexOf(a.suit);\n    const bSuit = CONSTANTS.SUITES.indexOf(b.suit);\n    const aRank = CONSTANTS.RANKS.indexOf(a.rank);\n    const bRank = CONSTANTS.RANKS.indexOf(b.rank);\n    if (aSuit === bSuit) return aRank - bRank\n    else return aSuit - bSuit;\n  });\n  return handCopy;\n}\n\nfunction serialiseCards(arr) {\n  return arr.map((c) => `${c.suit}:${c.rank}`).join('|');\n}\n\nfunction deserialiseCards(str) {\n  if (!str) return [];\n  return str.split('|').map((s) => {\n    const [suite, rank] = s.split(':');\n    return new Card(suite, rank);\n  });\n}\n\nfunction assembleDeck() {\n  return CONSTANTS.SUITES.flatMap((s) => CONSTANTS.RANKS.map((r) => new Card(s, r)));\n}\n\nfunction shuffleCards(arr) {\n  const shuffled = arr.slice(0);\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\nexport {\n  assembleDeck,\n  shuffleCards,\n  serialiseCards,\n  deserialiseCards,\n  sortCards\n};","import './bodyheader.css';\n\nfunction BodyHeader({title, detail}) {\n\n  return (\n    <div className=\"body-header\">\n      <h3 className=\"body-header__title\">{title}</h3>\n      <div className=\"body-header__counter\">{detail}</div>\n    </div>\n  );\n}\n\nexport default BodyHeader;","import { useState } from 'react';\nimport BodyHeader from '../bodyheader/bodyheader';\nimport './deck.css';\n\nfunction Deck({ cards, handleDraw, handleShuffle }) {\n  const [numToDraw, setNumToDraw] = useState(1);\n\n  function draw() {\n    handleDraw(numToDraw);\n    setNumToDraw(1);\n  }\n\n  return (\n    <div className=\"main-body__block main-body__block--deck\">\n      <BodyHeader title=\"Deck\" detail={`${cards.length}/52`}></BodyHeader>\n      <ul className=\"cards-in-deck__list\">\n      {cards.map((c, i) => {\n        return(\n          <li key={i} className=\"deck-card\" style={{left: `${(cards.length - (i + 1)) / 4}px`, top: `${(i + 1) / 2}px`,  zIndex: cards.length - (i + 1)}}>\n            <img className=\"card-deck__image\" width=\"100%\" src=\"./assets/cards/1B.svg\" alt={`${c.rank}${c.suit}`} />\n            {/*<div className=\"deck-card__dummy\">{`${c.rank}${c.suit}`}</div>*/}\n          </li>\n        )\n      })}\n      </ul>\n      <div className=\"card-controls\">\n        <button className=\"btn control\" type=\"button\" onClick={handleShuffle}>Shuffle</button>\n        <form method=\"GET\" action=\"/\" className=\"draw-card control\">\n          <label htmlFor=\"draw-card-input\" className=\"sr-only\">Enter number of cards to draw</label>\n          <input id=\"draw-card-input\" className=\"draw-card__input\" type=\"number\" min=\"1\" max=\"52\" value={numToDraw} onChange={(e) => setNumToDraw(e.target.value)} />\n          <button className=\"draw-card__submit btn\" type=\"button\" onClick={draw}>Draw</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Deck;","import { useEffect, useState } from 'react';\nimport BodyHeader from '../bodyheader/bodyheader';\nimport CONSTANTS from '../../common/constants';\nimport './hand.css';\n\nfunction Hand({ cards, sort }) {\n  const [totalInHand, setTotalInHand] = useState(0);\n\n  useEffect(() => {\n    setTotalInHand(calculateTotal(cards));\n  }, [cards]);\n\n  function calculateTotal(arr) {\n    if (!Array.isArray(arr) || arr.length === 0) return 0;\n    return arr.reduce((previous, current) => {\n      return previous + CONSTANTS.RANKS.indexOf(current.rank) + 2;\n    }, 0);\n  }\n\n  return (\n    <div className=\"main-body__block main-body__block--hand\">\n      <BodyHeader title=\"Hand\" detail={`${cards.length} (${totalInHand})`}></BodyHeader>\n      <ul className=\"cards-in-hand__list\">\n        {cards.map((c, i) => {\n          return(\n            <li key={i} className=\"drawn-card slide-in\" style={{left: `${i * 28}px`, zIndex: i + 1, transform: `translateX(${-100 * (i + 1)}%)`}}>\n              <img className=\"drawn-card__image\" src={`./assets/cards/${c.rank}${c.suit}.svg`} alt={`Card: ${c.rank} of ${c.suit}`} width=\"100%\" />\n            </li>\n          )\n        })}\n      </ul>\n      <div className=\"card-controls\">\n        <button className=\"btn control\" type=\"button\" disabled={cards.length < 2} onClick={sort}>Sort</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Hand;","import './notification.css';\n\nfunction Notification({msg, hasMsg, type = 'notification--info'}) {\n  return (\n    <div className={`notification ${type} ${hasMsg ? 'notification--visible slide-down' : ''}`}>\n      <p className=\"notification__text\">{msg}</p>\n    </div>\n  );\n}\n\nexport default Notification;","import './mainheader.css';\n\nfunction MainHeader({handleSave, handleReset}) {\n  return (\n      <header className=\"main-header\">\n        <div className=\"main-header__title\">GreenJacque</div>\n        <nav className=\"main-nav\">\n          <ul className=\"main-nav__list\">\n            <li className=\"nav-list-item\">\n              <button className=\"btn\" type=\"button\" onClick={handleSave}>Save</button>\n            </li>\n            <li className=\"nav-list-item\">\n              <button className=\"btn btn--caution\" type=\"button\" onClick={handleReset}>Reset</button>\n            </li>\n          </ul>\n        </nav>\n      </header>\n  );\n}\n\nexport default MainHeader;","import './styles/main.css';\nimport './styles/elements.css';\nimport './styles/animation.css';\n\nimport { useEffect, useState } from 'react';\nimport {\n  assembleDeck,\n  shuffleCards,\n  serialiseCards,\n  deserialiseCards,\n  sortCards\n} from './common/common';\nimport Deck from './components/deck/deck';\nimport Hand from './components/hand/hand';\nimport Notification from './components/notification/notification';\nimport CONSTANTS from './common/constants';\nimport MainHeader from './components/mainheader/mainheader';\n\nfunction Main() {\n  const [deck, setDeck] = useState([]);\n  const [hand, setHand] = useState([]);\n  const [hasMsg, setHasMsg] = useState(false);\n  const [msg, setMsg] = useState('');\n\n  useEffect(() => {\n    onload();\n  }, []);\n\n  function onload() {\n    const timeString = localStorage.getItem(CONSTANTS['STORAGE-KEY-TIME']);\n    const deckString = localStorage.getItem(CONSTANTS['STORAGE-KEY-DECK']);\n    const handString = localStorage.getItem(CONSTANTS['STORAGE-KEY-HAND']);\n\n    if (timeString && deckString && handString) { // this is a bit naive\n      const date = new Date(parseInt(timeString));\n      const deck = deserialiseCards(deckString);\n      const hand = deserialiseCards(handString);\n\n      setDeck(deck);\n      setHand(hand);\n      setMsg(`Loaded your saved game from ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} @ ${date.getHours()}: ${date.getMinutes()} . Please press \"Reset\" to start over.`);\n      setHasMsg(true);\n      setTimeout(() => {\n        setHasMsg(false);\n        setMsg('');\n      }, 4000);\n    } else {\n      setDeck(assembleDeck());\n      setHand([]);\n    }\n  }\n\n  function handleSave() {\n    const timestamp = Date.now();\n    const deckString = serialiseCards(deck);\n    const handString = serialiseCards(hand);\n    localStorage.setItem(CONSTANTS['STORAGE-KEY-TIME'], timestamp);\n    localStorage.setItem(CONSTANTS['STORAGE-KEY-DECK'], deckString);\n    localStorage.setItem(CONSTANTS['STORAGE-KEY-HAND'], handString);\n  }\n\n  function handleReset() {\n    setDeck(assembleDeck());\n    setHand([]);\n    localStorage.removeItem(CONSTANTS['STORAGE-KEY-TIME']);\n    localStorage.removeItem(CONSTANTS['STORAGE-KEY-DECK']);\n    localStorage.removeItem(CONSTANTS['STORAGE-KEY-HAND']);\n  }\n\n  function handleSort() {\n    setHand(sortCards(hand));\n  }\n\n  function handleDraw(numToDraw) {\n    const deckCopy = deck.slice(0);\n    const removedCards = deckCopy.splice(0, numToDraw);\n    setDeck(deckCopy);\n    setHand([...hand, ...removedCards]);\n  };\n\n  function handleShuffle() {\n    setDeck(shuffleCards(deck));\n  }\n\n  return (\n    <>\n      <MainHeader handleSave={handleSave} handleReset={handleReset}></MainHeader>\n      <main className=\"main-body\">\n        <Notification msg={msg} hasMsg={hasMsg}></Notification>\n        <Deck cards={deck} handleDraw={handleDraw} handleShuffle={handleShuffle} />\n        <Hand cards={hand} sort={handleSort} />\n      </main>\n    </>\n  );\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('greenjacque')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}